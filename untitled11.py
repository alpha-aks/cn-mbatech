# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EZPckUGbTgkbLXKabiOTYbmT8JXSu2_v
"""

# McCulloch-Pitts Neuron
def mp_neuron(inputs, weights, threshold):
    total = sum(i * w for i, w in zip(inputs, weights))
    return 1 if total >= threshold else 0

# AND Gate: output is 1 only when both inputs are 1
def AND_gate(x1, x2):
    return mp_neuron([x1, x2], [1, 1], 2)

# OR Gate: output is 1 if any input is 1
def OR_gate(x1, x2):
    return mp_neuron([x1, x2], [1, 1], 1)

# NOT Gate: output is 1 if input is 0
def NOT_gate(x):
    return mp_neuron([x], [-1], 0)

# XOR Gate: (A AND NOT B) OR (NOT A AND B)
def XOR_gate(x1, x2):
    a = AND_gate(x1, NOT_gate(x2))
    b = AND_gate(NOT_gate(x1), x2)
    return OR_gate(a, b)

# Test all gates
print("AND Gate")
for a in [0, 1]:
    for b in [0, 1]:
        print(f"{a} AND {b} = {AND_gate(a, b)}")

print("\nOR Gate")
for a in [0, 1]:
    for b in [0, 1]:
        print(f"{a} OR {b} = {OR_gate(a, b)}")

print("\nNOT Gate")
for a in [0, 1]:
    print(f"NOT {a} = {NOT_gate(a)}")

print("\nXOR Gate")
for a in [0, 1]:
    for b in [0, 1]:
        print(f"{a} XOR {b} = {XOR_gate(a, b)}")